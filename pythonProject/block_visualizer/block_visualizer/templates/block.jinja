<!DOCTYPE html>
<html>

<head>
  <script src="https://d3js.org/d3.v5.min.js"></script>
</head>

<body>
  <style>
    .node {
      cursor: pointer;
      color: rebeccapurple;
    }

    .link {
      fill: none;
      stroke: #9ecae1;
      stroke-width: 1.5px;
    }
  </style>

  <div id="content">
    <svg width="1000" height="1000"></svg>
  </div>

  <script>
    var width = 1000, height = 1000;

    var nodes_dict={
            
        {% for n in graph_nodes %}
            "node_{{n.id}}": {
                name:"node_{{n.id}}",
                naziv:"{{n.name}}",
            },
        {% endfor %}

    };

    var nodes=[
    
        {% for n in graph_nodes %}
            {
                name:"node_{{n.id}}",
                naziv:"{{n.name}}",
            }
        {% endfor %}

    ];

    var links=[
        {% for e in graph_edges %}
            {
                source:"node_{{e.vertex1.id}}",
                target:"node_{{e.vertex2.id}}"},
        {% endfor %}
    ];

    links.forEach(function(link) {
        link.source = nodes_dict[link.source];
        link.target = nodes_dict[link.target];
    });

    var simulation = d3.forceSimulation(nodes)
	.force('charge', d3.forceManyBody().strength(-95))
	.force('center', d3.forceCenter(width / 2, height / 2))
	.force('link', d3.forceLink().links(links).distance(100))
	.on('tick', tick);



    var svg = d3.select('svg');

    var link = svg.selectAll('.link')
      .data(links)
      .enter().append('line')
      .attr('class', 'link');

    var node = svg.selectAll('.node')
      .data(nodes)
      .enter().append('g')
      .attr('class', 'node')
      .attr('id', function (d) { return d.name; })
      .call(d3.drag()
        .on("start", dragstarted)
        .on("drag", dragged)
        .on("end", dragended)
      );

    var circles = node.append('circle')
      .attr('r', 20)
      .attr('fill', 'white')
      .attr('stroke', 'black')
      .attr('stroke-width', 2);

    var text = node.append('text')
      .attr('x', 0)
      .attr('y', 5)
      .attr('text-anchor', 'middle')
      .attr('font-size', 18)
      .attr('font-family', 'sans-serif')
      .attr('fill', 'black')
      .text(function (d) { return d.naziv; });

    function tick() {
      node.attr("transform", function (d) {
        return "translate(" + d.x + "," + d.y + ")";
      });

        link.attr('x1', function (d) { return d.source.x; })
        .attr('y1', function (d) { return d.source.y; })
        .attr('x2', function (d) { return d.target.x; })
        .attr('y2', function (d) { return d.target.y; });
    }

    function dragstarted(d) {
      if (!d3.event.active) simulation.alphaTarget(0.3).restart();
      d.fx = d.x;
      d.fy = d.y;
    }

    function dragged(d) {
      d.fx = d3.event.x;
      d.fy = d3.event.y;
    }

    function dragended(d) {
      if (!d3.event.active) simulation.alphaTarget(0);
      d.fx = null;
      d.fy = null;
    }
  </script>
</body>

</html>

