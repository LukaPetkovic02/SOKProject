
  <script>

    var nodes = [
        {% for key, value in graph_nodes.items() %}

            {
                id:'{{key}}',
                name:'{{ value.name }}'
            },

        {% endfor %}
    ]

    var links = [
        {% for key, value in graph_edges.items() %}

            {
                source:'{{value.node1.id}}',
                target:'{{ value.node2.id }}'
            },

        {% endfor %}
    ]


    var selfLoops = [
    ];

    var parentDiv = d3.select("#main");

    var svg = parentDiv.append("svg")
        .attr("width", "100%")
        .attr("height", "100%");

    var parentWidth = parentDiv.node().getBoundingClientRect().width;
    var parentHeight = parentDiv.node().getBoundingClientRect().height;

    // Force Simulation
    var simulation = d3.forceSimulation(nodes.concat(selfLoops))
        .force("link", d3.forceLink(links).id(d => d.id).distance(function(d) { return 150; })) // Set the desired distance between nodes
        .force("charge", d3.forceManyBody().strength(-200)) // Set a low repulsion force
        .force("center", d3.forceCenter(parentWidth / 2, parentHeight / 2))
        .force("x", d3.forceX(parentWidth / 2).strength(0.05))
        .force("y", d3.forceY(parentHeight / 2).strength(0.05));

    function centerPull(alpha) {
      nodes.forEach(function(d) {
        d.fx = (parentWidth / 2 - d.x) * 0.1;
        d.fy = (parentHeight / 2 - d.y) * 0.1;
      });
    }


    // Arrowhead Definition
    var marker = svg.append("defs").append("marker")
        .attr("id", "arrowhead")
        .attr("viewBox", "-0 -5 10 10")
        .attr("refX", 35)
        .attr("refY", 0)
        .attr("orient", "auto")
        .attr("markerWidth", 8)
        .attr("markerHeight", 8)
        .attr("xoverflow", "visible");
    marker.append("svg:path")
        .attr("d", "M 0,-5 L 10 ,0 L 0,5")
        .attr("fill", "#999");

    // Link Creation
    var link = svg.append("g")
        .attr("stroke", "#999")
        .attr("stroke-opacity", 0.6)
        .selectAll("path")
        .data(links)
        .enter().append("path")
        .attr("stroke-width", 1)  // Adjust stroke width as needed
        .attr("marker-end", "url(#arrowhead)")
        .attr("fill", "none")
        .attr("class", "link")
        .attr("id", function(d, i) { return "link" + i; })
        .attr("curved", function(d) { return d.curved ? "true" : "false"; });

    // Self-loop Creation
    var selfLoop = svg.append("g")
        .attr("fill", "none")
        .attr("stroke", "#999")
        .attr("stroke-opacity", 0.6)
        .selectAll("path")
        .data(selfLoops)
        .enter().append("path")
        .attr("class", "self-loop")
        .attr("d", function(d) {
          var node = nodes.find(node => node.id === d.source);
          var r = 20; // Node radius
          var x = node.x;
          var y = node.y;
          return "M " + (x + r) + "," + y + " A " + (r*1.5) + "," + (r*1.5) + " 0 1,0 " + (x - r) + "," + y; // Dynamically calculate the self-loop path
        });

    // Node Creation
    var node = svg.append("g")
        .attr("stroke", "#fff")
        .attr("stroke-width", 1.5)
      .selectAll("circle")
      .data(nodes)
      .enter().append("circle")
        .attr("r", 20)  // Adjust the radius of the circle to make it bigger
        .attr("fill", "#000")
        // Add drag behavior to nodes
        .call(d3.drag()
            .on("start", dragstarted)
            .on("drag", dragged)
            .on("end", dragended));

    // Text inside the Circle
    var text = svg.append("g").selectAll("text")
      .data(nodes)
      .enter().append("text")
        .text(function(d) { return d.name; })
        .attr("fill", "#fff")  // Set text color
        .attr("font-size", "12px")  // Set text font size
        .attr("text-anchor", "middle")  // Center the text horizontally
        .attr("dy", ".35em");  // Adjust vertical alignment of text

    // Tooltip Creation
    node.append("title")
        .text(d => d.name);

    // Simulation Event
    simulation.on("tick", () => {
        link.attr("d", function(d) {
            if (d.curved) {
                var dx = d.target.x - d.source.x,
                    dy = d.target.y - d.source.y,
                    dr = Math.sqrt(dx * dx + dy * dy);
                return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + d.target.x + "," + d.target.y;
            } else {
                return "M" + d.source.x + "," + d.source.y + "L" + d.target.x + "," + d.target.y;
            }
        });

        selfLoop
            .attr("d", function(d) {
              var node = nodes.find(node => node.id === d.source);
              var r = 20; // Node radius
              var x = node.x;
              var y = node.y;
              return "M " + (x + r) + "," + y + " A " + (r*1.5) + "," + (r*1.5) + " 0 1,0 " + (x - r) + "," + y; // Dynamically calculate the self-loop path
            });

        node
            .attr("cx", d => d.x)
            .attr("cy", d => d.y);

        // Update text position with nodes
        text
            .attr("x", function(d) { return d.x; })
            .attr("y", function(d) { return d.y; });
    });

    window.addEventListener("resize", function () {
            // Update the force simulation center on resize
            updateSimulationCenter();
        });


    function updateSimulationCenter() {
            var parentWidth = parentDiv.node().getBoundingClientRect().width;
            var parentHeight = parentDiv.node().getBoundingClientRect().height;

            // Update the center force of the simulation
            simulation.force("center", d3.forceCenter(parentWidth / 2, parentHeight / 2))
                .alpha(1)  // Restart the simulation to take the changes into account
                .restart();
        }


    // Drag functions
    function dragstarted(d) {
        if (!d3.event.active) simulation.alphaTarget(0.3).restart();
        d.fx = d.x;
        d.fy = d.y;
    }

    function dragged(d) {
        d.fx = d3.event.x;
        d.fy = d3.event.y;
    }

    function dragended(d) {
        if (!d3.event.active) simulation.alphaTarget(0);
        d.fx = null;
        d.fy = null;
    }


  </script>



